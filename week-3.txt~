H-w 3.1:
  
	Primary:
	mongod --port 30001 --dbpath mongod-pri --replSet CorruptionTest --smallfiles --oplogSize 128
	Secondary
	mongod --port 30002 --dbpath mongod-sec --replSet CorruptionTest --smallfiles --oplogSize 128
	Arbiter
	mongod --port 30003 --dbpath mongod-arb --replSet CorruptionTest

	- After starting it you can login to any of the RS node shell for checking which is P/S/A: 
	> mongo --port 30002

	MongoDB shell version: 2.6.1
connecting to: 127.0.0.1:30002/test
CorruptionTest:SECONDARY> 
CorruptionTest:SECONDARY> 
CorruptionTest:SECONDARY> rs.status()
{
	"set" : "CorruptionTest",
	"date" : ISODate("2014-05-16T16:54:40Z"),
	"myState" : 2,
	"syncingTo" : "127.0.0.1:30001",
	"members" : [
		{
			"_id" : 0,
			"name" : "127.0.0.1:30001",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 229,
			"optime" : Timestamp(1399499925, 7077),
			"optimeDate" : ISODate("2014-05-07T21:58:45Z"),
			"lastHeartbeat" : ISODate("2014-05-16T16:54:39Z"),
			"lastHeartbeatRecv" : ISODate("2014-05-16T16:54:40Z"),
			"pingMs" : 0,
			"electionTime" : Timestamp(1400259057, 1),
			"electionDate" : ISODate("2014-05-16T16:50:57Z")
		},
		{
			"_id" : 1,
			"name" : "127.0.0.1:30002",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 246,
			"optime" : Timestamp(1399499925, 7077),
			"optimeDate" : ISODate("2014-05-07T21:58:45Z"),
			"self" : true
		},
		{
			"_id" : 2,
			"name" : "127.0.0.1:30003",
			"health" : 1,
			"state" : 7,
			"stateStr" : "ARBITER",
			"uptime" : 167,
			"lastHeartbeat" : ISODate("2014-05-16T16:54:39Z"),
			"lastHeartbeatRecv" : ISODate("2014-05-16T16:54:39Z"),
			"pingMs" : 0
		}
	],
	"ok" : 1
}
CorruptionTest:SECONDARY> show collections
2014-05-16T22:26:02.930+0530 error: { "$err" : "not master and slaveOk=false", "code" : 13435 } at src/mongo/shell/query.js:131
CorruptionTest:SECONDARY> show dbs
admin   (empty)
local   0.281GB
test    (empty)
testDB  0.125GB
CorruptionTest:SECONDARY> use testDB
switched to db testDB
CorruptionTest:SECONDARY> show collections
2014-05-16T22:26:20.831+0530 error: { "$err" : "not master and slaveOk=false", "code" : 13435 } at src/mongo/shell/query.js:131
CorruptionTest:SECONDARY> rs.slaveOk()
CorruptionTest:SECONDARY> show collections
system.indexes
testColl
CorruptionTest:SECONDARY> db.testColl.findOne()
{
	"_id" : 0,
	"string" : "testStringForPadding0000000000000000000000000000000000000000",
	"otherID" : ObjectId("536aac8ef7f5f8e9b4c240ea")
}
CorruptionTest:SECONDARY> db.testColl.find().explain()
2014-05-16T22:27:21.961+0530 error: {
	"$err" : "BSONObj size: 1685417573 (0x64756E65) is invalid. Size must be between 0 and 16793600(16MB) First element: //drrdu/dvad\u0002string: ?type=111",
	"code" : 10334
} at src/mongo/shell/query.js:131

Is shows some error.

- So, now I've stopped the DB using the following command in secondary shell:
CorruptionTest:SECONDARY> db.shutdownServer()
shutdown command only works with the admin database; try 'use admin'
CorruptionTest:SECONDARY> use admin
switched to db admin
CorruptionTest:SECONDARY> db.shutdownServer()
2014-05-16T22:35:21.659+0530 DBClientCursor::init call() failed
server should be down...
2014-05-16T22:35:21.662+0530 trying reconnect to 127.0.0.1:30002 (127.0.0.1) failed
2014-05-16T22:35:21.663+0530 warning: Failed to connect to 127.0.0.1:30002, reason: errno:111 Connection refused
2014-05-16T22:35:21.663+0530 reconnect 127.0.0.1:30002 (127.0.0.1) failed failed couldn't connect to server 127.0.0.1:30002 (127.0.0.1), connection attempt failed
2014-05-16T22:35:21.779+0530 trying reconnect to 127.0.0.1:30002 (127.0.0.1) failed
2014-05-16T22:35:21.779+0530 warning: Failed to connect to 127.0.0.1:30002, reason: errno:111 Connection refused
2014-05-16T22:35:21.779+0530 reconnect 127.0.0.1:30002 (127.0.0.1) failed failed couldn't connect to server 127.0.0.1:30002 (127.0.0.1), connection attempt failed

- Now I'm out of the shell, as the mongod is stopped. 
- I've deleted all the files which are under the mongod-sec:
ravitezu@terminator:~/Downloads$ cd mongod-sec/
ravitezu@terminator:~/Downloads/mongod-sec$ ls
journal  local.0  local.1  local.ns  mongod.lock  testDB.0  testDB.1  testDB.2  testDB.ns
ravitezu@terminator:~/Downloads/mongod-sec$ rm -rf *

- And started the host with the below command(as above):
ravitezu@terminator:~/Downloads$ mongod --port 30002 --dbpath mongod-sec --replSet CorruptionTest --smallfiles --oplogSize 128

- From above logs: It has recovered, it means it has pulled the data from Primary node. 
- Use the MongProc. 

H-w 3.2:
  
  - Before Friday

H-w 3.3:
 
 - The application will still be able to read data.
 - The primary in DC2 will step itself down when the partition occurs.
 - The two secondaries will hold an election when the partition occurs.
 - The application will still be able to write while the partition is up.

H-w 3.4:

  - The db.collection.drop() command will still be in the oplog, and will need to be avoided.
  - Ensure that any writes that occurred after the drop() command are not replayed (you might need to deal with these later), because these might lead to unexpected or inconsistent results.

H-w 3.5:

  

  
